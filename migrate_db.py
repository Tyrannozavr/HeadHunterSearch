import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from app.database import init_db, AsyncSessionLocal
from app.services import auto_apply_service
from app.utils.auth import get_password_hash
from app.database import User, SystemSettings
from sqlalchemy import select

async def migrate_database():
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        from app.database import engine
        from sqlalchemy import text
        async with engine.begin() as conn:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS job_searches")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS applications")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS hh_user_credentials")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS request_logs")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS system_settings")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS oauth_states")))
            await conn.run_sync(lambda sync_conn: sync_conn.execute(text("DROP TABLE IF EXISTS users")))
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã
        await init_db()
        print("‚úÖ –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        
        async with AsyncSessionLocal() as session:
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            admin_exists = await session.execute(
                select(User).where(User.username == "admin")
            )
            
            if not admin_exists.scalar_one_or_none():
                admin_user = User(
                    username="admin",
                    email="admin@example.com",
                    hashed_password=get_password_hash("admin123"),
                    role="admin",
                    is_active=True
                )
                session.add(admin_user)
                await session.commit()
                print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω (–ª–æ–≥–∏–Ω: admin, –ø–∞—Ä–æ–ª—å: admin123)")
            else:
                print("‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            await auto_apply_service.update_setting(
                session, 
                "check_interval_minutes", 
                "30", 
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö"
            )
            await auto_apply_service.update_setting(
                session, 
                "max_applications_per_day", 
                "50", 
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å"
            )
            await auto_apply_service.update_setting(
                session, 
                "max_users", 
                "100", 
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            )
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000/register")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ admin/admin123")
        print("4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ HH.ru —á–µ—Ä–µ–∑ OAuth")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(migrate_database()) 