#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ HH.ru Auto Apply
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.database import init_db, AsyncSessionLocal
from app.services import auto_apply_service
from app.models import JobSearchCreate, UserCredentialsCreate
from app.hh_api import hh_client


async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        await init_db()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        async with AsyncSessionLocal() as session:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            credentials_data = UserCredentialsCreate(
                access_token="test_token_123",
                resume_id="test_resume_456"
            )
            
            credentials = await auto_apply_service.save_credentials(
                session=session,
                access_token=credentials_data.access_token,
                resume_id=credentials_data.resume_id
            )
            print(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —Å ID: {credentials.id}")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
            job_search_data = JobSearchCreate(
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
                filter_url="https://hh.ru/search/vacancy?text=python&area=1",
                cover_letter="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏..."
            )
            
            job_search = await auto_apply_service.create_job_search(
                session=session,
                job_data=job_search_data
            )
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω —Å ID: {job_search.id}")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            job_searches = await auto_apply_service.get_job_searches(session)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {len(job_searches)}")
            
            applications = await auto_apply_service.get_applications(session)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {len(applications)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    return True


async def test_hh_api():
    """–¢–µ—Å—Ç API HH.ru (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API HH.ru...")
    
    try:
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
        test_url = "https://hh.ru/search/vacancy?text=python&area=1&experience=between1And3"
        filters = hh_client.extract_filters_from_url(test_url)
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ URL —É—Å–ø–µ—à–µ–Ω: {filters}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
        try:
            hh_client.extract_filters_from_url("https://google.com")
            print("‚ùå –û—à–∏–±–∫–∞: URL —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–æ–º–µ–Ω–æ–º –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ")
            return False
        except ValueError:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False
    
    return True


async def test_services():
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
        service = auto_apply_service
        print("‚úÖ –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {'–†–∞–±–æ—Ç–∞–µ—Ç' if service.is_running else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False
    
    return True


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HH.ru Auto Apply\n")
    
    tests = [
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("API HH.ru", test_hh_api),
        ("–°–µ—Ä–≤–∏—Å—ã", test_services),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python main.py")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")
        print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ HH.ru")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–ª–∏–∫")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 